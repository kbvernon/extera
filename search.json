[{"path":"https://kbvernon.github.io/extera/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 extera authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kbvernon.github.io/extera/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kenneth Blake Vernon. Author, maintainer, copyright holder.","code":""},{"path":"https://kbvernon.github.io/extera/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vernon K (2025). extera: Template Engine Inspired 'tera'. R package version 0.0.0.9000.","code":"@Manual{,   title = {extera: Template Engine Inspired by 'tera'},   author = {Kenneth Blake Vernon},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://kbvernon.github.io/extera/index.html","id":"extera","dir":"","previous_headings":"","what":"Template Engine Inspired by tera","title":"Template Engine Inspired by tera","text":"name extera portmandeau extendr tera, making suggestive package’s intended purpose, provide extendr-powered R wrapper around blazing fast tera templating-engine Rust.","code":""},{"path":"https://kbvernon.github.io/extera/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Template Engine Inspired by tera","text":"can install development version extera like :","code":"# install.packages(\"pak\") pak::pak(\"kbvernon/extera\")"},{"path":"https://kbvernon.github.io/extera/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Template Engine Inspired by tera","text":"get feel extera can , let’s start simple “hello world” example. syntax API look pretty familiar anyone used glue something like glue::glue(\"Foo { x }\", x = \"bar\"). big difference object-oriented workflow.","code":"library(extera)  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  tera #>  #> ── ExTera ── #>  #> Template library: #> • hello-world  tera$render_to_string(   \"hello-world\",   x = \"world\",   y = \"ExTera\" ) #> Rendered hello-world template: #>  #> <p>Hello world. This is ExTera.<\/p> #>"},{"path":"https://kbvernon.github.io/extera/index.html","id":"initializing-extera","dir":"","previous_headings":"","what":"Initializing ExTera","title":"Template Engine Inspired by tera","text":"Everything extera revolves around ExTera object, serves template library encapsulated rendering methods. example, initialize ExTera empty template library calling ExTera$new() arguments. complicated directory system nested templates inheritance patterns - common situation web development, may find easier initialize ExTera specifying directory glob containing * wildcard indicate number subfolders template files. Suppose, example, website directory looks like : can generate new ExTera around directory like ","code":"website <- file.path(tempdir(), \"website\")  dir.create(website) dir.create(file.path(website, \"posts\"))  writeLines(   text = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   con = file.path(website, \"index.html\") )  writeLines(   text = \"<h2>About Me<\/h2><p>{{ description }}<\/p>\",   con = file.path(website, \"about-me.html\") )  writeLines(   text = '<body>   <h2>{{ title }}<\/h2>   <p>{{ paragraph }}<\/p> <\/body> ',   con = file.path(website, \"posts\", \"blog-template.html\") )  cat(   \"website\",   list.files(website, recursive = TRUE),   sep = \"\\n- \" ) website - about-me.html - index.html - posts/blog-template.html tera <- ExTera$new(dir = file.path(website, \"**/*.html\"))  tera #>  #> ── ExTera ── #>  #> Template library: #> • index.html #> • posts/blog-template.html #> • about-me.html"},{"path":"https://kbvernon.github.io/extera/index.html","id":"rendering-basics","dir":"","previous_headings":"","what":"Rendering basics","title":"Template Engine Inspired by tera","text":"render template, supply context, set key-value pairs, keys variable names - surrounded {{ variable }} template - values content inject template. can render template one two ways, using self$render() render file disk self$render_to_string() render character string current R session. Consider hypothetical website’s blog post template: two ways render template. notice apostrophe converted html character entity &#x27;? example escaping, tera default. can turn behavior using self$autoescape_off(). turn back self$autoescape_on().","code":"file.path(website, \"posts\", \"blog-template.html\") |>   readLines() |>   cat(sep = \"\\n\") <body>   <h2>{{ title }}<\/h2>   <p>{{ paragraph }}<\/p> <\/body> # render to file outfile <- file.path(tempdir(), \"rendered-blog-post.html\")  tera$render(   \"posts/blog-template.html\",   outfile = outfile,   title = \"This is my blog\",   paragraph = \"Democracy was fun, wasn't it?\" )  cat(   readLines(outfile, warn = FALSE),   sep = \"\\n\" ) #> <body> #>   <h2>This is my blog<\/h2> #>   <p>Democracy was fun, wasn&#x27;t it?<\/p> #> <\/body>  # render to string tera$render_to_string(   \"posts/blog-template.html\",   title = \"This is my blog\",   paragraph = \"Democracy was fun, wasn't it?\" ) #> Rendered posts/blog-template.html template: #>  #> <body> #>   <h2>This is my blog<\/h2> #>   <p>Democracy was fun, wasn&#x27;t it?<\/p> #> <\/body> #>  #> tera$autoescape_off()  tera$render_to_string(   \"posts/blog-template.html\",   title = \"This is my blog\",   paragraph = \"Democracy was fun, wasn't it?\" ) #> Rendered posts/blog-template.html template: #>  #> <body> #>   <h2>This is my blog<\/h2> #>   <p>Democracy was fun, wasn't it?<\/p> #> <\/body> #>  #>"},{"path":"https://kbvernon.github.io/extera/index.html","id":"rendering-logic","dir":"","previous_headings":"","what":"Rendering logic","title":"Template Engine Inspired by tera","text":"tera templating engine offers lot additional functionality, like control flow data manipulation. following example shows construct -loop, add conditional statements, apply built-functions. Notice {% expression %} used signal expressions template. use dashes tells renderer remove white space ({%- expression %}) ({% expression -%}) expression.","code":"tera$add_string_templates(   \"star-wars\" = '<h2>{{ title }}<\/h2> <ol> {%- for person in people %}   {%- if person.films is containing(\"A New Hope\") %}   {%- if person.species and person.species is containing(\"Human\") %}   <li>{{ person.name }} ({{ person.homeworld }})<\/li>   {%- endif %}   {%- endif %} {%- endfor %} <\/ol> ' )  starwars <- dplyr::starwars[c(\"name\", \"films\", \"homeworld\", \"species\")]  tera$render_to_string(   \"star-wars\",   title = \"Humans of A New Hope\",   people = starwars ) #> Rendered star-wars template: #>  #> <h2>Humans of A New Hope<\/h2> #> <ol> #>   <li>Luke Skywalker (Tatooine)<\/li> #>   <li>Darth Vader (Tatooine)<\/li> #>   <li>Leia Organa (Alderaan)<\/li> #>   <li>Owen Lars (Tatooine)<\/li> #>   <li>Beru Whitesun Lars (Tatooine)<\/li> #>   <li>Biggs Darklighter (Tatooine)<\/li> #>   <li>Obi-Wan Kenobi (Stewjon)<\/li> #>   <li>Wilhuff Tarkin (Eriadu)<\/li> #>   <li>Han Solo (Corellia)<\/li> #>   <li>Wedge Antilles (Corellia)<\/li> #>   <li>Raymus Antilles (Alderaan)<\/li> #> <\/ol> #>"},{"path":"https://kbvernon.github.io/extera/index.html","id":"context-format","dir":"","previous_headings":"","what":"Context format","title":"Template Engine Inspired by tera","text":"-loop, may noticed used dot-indexing syntax, e.g., person.name. person list R, equivalent person[[\"name\"]]. usage suggests context specific format, like named list. fact, tera templating engine generally expects data , let’s say, JSON-like format. biggest way affects data structures coming R way data.frames handled. R, tables column-major, JSON-like format tera wants row-major “record” oriented. way extera handles serializing R data structures added context JSON using yyjsonr. ideal, relatively safe. also enforces specific data model users able reason fairly well. Oh, yyjsonr , fast, performance issues minor. may help see example looks like. applies filters used template .","code":"starwars[[\"in_a_new_hope\"]] <- sapply(   starwars[[\"films\"]],   \\(x) \"A New Hope\" %in% x )  starwars <- subset(   starwars,   in_a_new_hope & !is.na(species) & species == \"Human\",   select = c(name, homeworld) )  json_str <- yyjsonr::write_json_str(   list(     title = \"Humans of A New Hope\",     people = starwars   ),   pretty = TRUE )  cat(json_str) #> { #>   \"title\": [ #>     \"Humans of A New Hope\" #>   ], #>   \"people\": [ #>     { #>       \"name\": \"Luke Skywalker\", #>       \"homeworld\": \"Tatooine\" #>     }, #>     { #>       \"name\": \"Darth Vader\", #>       \"homeworld\": \"Tatooine\" #>     }, #>     { #>       \"name\": \"Leia Organa\", #>       \"homeworld\": \"Alderaan\" #>     }, #>     { #>       \"name\": \"Owen Lars\", #>       \"homeworld\": \"Tatooine\" #>     }, #>     { #>       \"name\": \"Beru Whitesun Lars\", #>       \"homeworld\": \"Tatooine\" #>     }, #>     { #>       \"name\": \"Biggs Darklighter\", #>       \"homeworld\": \"Tatooine\" #>     }, #>     { #>       \"name\": \"Obi-Wan Kenobi\", #>       \"homeworld\": \"Stewjon\" #>     }, #>     { #>       \"name\": \"Wilhuff Tarkin\", #>       \"homeworld\": \"Eriadu\" #>     }, #>     { #>       \"name\": \"Han Solo\", #>       \"homeworld\": \"Corellia\" #>     }, #>     { #>       \"name\": \"Wedge Antilles\", #>       \"homeworld\": \"Corellia\" #>     }, #>     { #>       \"name\": \"Raymus Antilles\", #>       \"homeworld\": \"Alderaan\" #>     } #>   ] #> }"},{"path":"https://kbvernon.github.io/extera/index.html","id":"inheritance","dir":"","previous_headings":"","what":"Inheritance","title":"Template Engine Inspired by tera","text":"Templates can inherit content one two ways, either using include , complicated inheritance, extends. extension mechanism little involved, required specify content blocks content child document injected. following example, define single block called content base parent template specify includes child template. details, check documentation tera.","code":"tera$add_string_templates(   \"index.html\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p> <div> {% include \"posts/blog-template.html\" -%} <\/div> ' )  tera$render_to_string(   \"index.html\",   x = \"world\",   y = \"ExTera\",   title = \"My blog post\",   paragraph = \"The Book of Bokonon tells us...\" ) #> Rendered index.html template: #>  #> <p>Hello world. This is ExTera.<\/p> #> <div> #> <body> #>   <h2>My blog post<\/h2> #>   <p>The Book of Bokonon tells us...<\/p> #> <\/body> #>  #> <\/div> #> base_html <- '<body>   <div id=\"content\">     {% block content %}     {% endblock content %}   <\/div> <\/body> '  child_html <- '{% extends \"base.html\" %} {%- block content %}   <h1>{{ title }}<\/h1>   <p>{{ paragraph }}<\/p> {% endblock content -%} '  tera$add_string_templates(   \"base.html\" = base_html,   \"child.html\" = child_html )  tera$render_to_string(   \"child.html\",   title = \"Index\",   paragraph = \"Welcome to my homepage.\" ) #> Rendered child.html template: #>  #> <body> #>   <div id=\"content\"> #>      #>   <h1>Index<\/h1> #>   <p>Welcome to my homepage.<\/p> #>  #>   <\/div> #> <\/body> #>"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":null,"dir":"Reference","previous_headings":"","what":"Tera Templating Engine — ExTera","title":"Tera Templating Engine — ExTera","text":"ExTera R6 class object uses extendr encapsulate Tera's templating engine. addition providing rendering functionality, acts library hold templates may include complex dependencies, feature called template \"inheritance\" Tera.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"templating engine requires two things: template, may guessed, includes variables rendering logic describing inject data, context, set variables values injected template. Templating syntax described Tera docs.","code":""},{"path":[]},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tera Templating Engine — ExTera","text":"ExTera$new() ExTera$print() ExTera$add_file_templates() ExTera$add_string_templates() ExTera$list_templates() ExTera$render() ExTera$render_to_string() ExTera$autoescape_on() ExTera$autoescape_off()","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tera Templating Engine — ExTera","text":"Create new ExTera object. populate template library files dir specified.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$new(dir = NULL)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"dir character scalar, glob pattern * wildcards indicating potentially nested directory containing multiple file templates. NULL (default), ExTera empty library initialized. See details information.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"glob pattern templates/*.html match files .html extension located directly inside templates folder, glob pattern templates/**/*.html match files .html extension directly inside subdirectory templates. default naming convention give template full relative path templates whatever directory called.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"# initialize ExTera with empty library tera <- ExTera$new() tera  # initialize ExTera from directory with glob template_dir <- file.path(tempdir(), \"templates\")  dir.create(template_dir)  tmp <- file.path(   template_dir,   \"hello-world-template.html\" )  writeLines(   text = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   con = tmp )  tera <- ExTera$new(dir = file.path(template_dir, \"*.html\")) tera"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Tera Templating Engine — ExTera","text":"print method ExTera object.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$print(n = 10L, ...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"n integer scalar, number templates print (default 10L) ... ignored","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-add-file-templates-","dir":"Reference","previous_headings":"","what":"Method add_file_templates()","title":"Tera Templating Engine — ExTera","text":"Add templates library file paths.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$add_file_templates(...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"... specify list templates key-value pairs key name template value path template file.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"templates must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  writeLines(   '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   con = file.path(tempdir(), \"hello-world.html\") )  writeLines(   '<img src=\"{{ img_src }}\">',   con = file.path(tempdir(), \"img-src.html\") )  tera$add_file_templates(   \"hello-world\" = file.path(tempdir(), \"hello-world.html\"),   \"img-src\" = file.path(tempdir(), \"img-src.html\") )  tera"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-add-string-templates-","dir":"Reference","previous_headings":"","what":"Method add_string_templates()","title":"Tera Templating Engine — ExTera","text":"Add templates library character strings.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$add_string_templates(...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"... specify list templates key-value pairs key name template value string template.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"templates must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   \"img-src\" = '<img src=\"{{ img_src }}\">' )  tera"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-list-templates-","dir":"Reference","previous_headings":"","what":"Method list_templates()","title":"Tera Templating Engine — ExTera","text":"List current templates library.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$list_templates()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"NULL (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   \"img-src\" = '<img src=\"{{ img_src }}\">' )  tera$list_templates()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-render-","dir":"Reference","previous_headings":"","what":"Method render()","title":"Tera Templating Engine — ExTera","text":"Render specified template file.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$render(template, outfile, ...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"template character scalar, name template render. outfile character scalar, path file template rendered. ... specify context key-value pairs key template variable value data inject.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"context elements must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"outfile (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  outfile <- file.path(tempdir(), \"rendered-hello-world.html\")  tera$render(   \"hello-world\",   outfile = outfile,   x = \"world\",   y = \"ExTera\" )  readLines(outfile, warn = FALSE)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-render-to-string-","dir":"Reference","previous_headings":"","what":"Method render_to_string()","title":"Tera Templating Engine — ExTera","text":"Render specified template string.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$render_to_string(template, ...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"template character scalar, name template render. ... specify context key-value pairs key template variable value data inject.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"context elements must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Rendered string class TeraString \"pretty\" printing.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  tera$render_to_string(   \"hello-world\",   x = \"world\",   y = \"ExTera\" )"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-autoescape-on-","dir":"Reference","previous_headings":"","what":"Method autoescape_on()","title":"Tera Templating Engine — ExTera","text":"Turn autoescaping HTML. Autoescaping default.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$autoescape_on()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"Autoescaping applies templates whose names end \".html\", \".htm\", \".xml\".","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   \"hello-world.html\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  # not recognized as html tera$render_to_string(   \"hello-world\",   x = \"&world\",   y = \"an apostrophe, '\" )  # html tera$render_to_string(   \"hello-world.html\",   x = \"&world\",   y = \"an apostrophe, '\" )"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-autoescape-off-","dir":"Reference","previous_headings":"","what":"Method autoescape_off()","title":"Tera Templating Engine — ExTera","text":"Turn autoescaping HTML.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$autoescape_off()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"Autoescaping default.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  tera$add_string_templates(   \"hello-world.html\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  tera$autoescape_off()  tera$render_to_string(   \"hello-world.html\",   x = \"&world\",   y = \"an apostrophe, '\" )"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"## ------------------------------------------------ ## Method `ExTera$new` ## ------------------------------------------------  # initialize ExTera with empty library tera <- ExTera$new() tera #>  #> ── ExTera ── #>  #> Template library:  # initialize ExTera from directory with glob template_dir <- file.path(tempdir(), \"templates\")  dir.create(template_dir)  tmp <- file.path(   template_dir,   \"hello-world-template.html\" )  writeLines(   text = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   con = tmp )  tera <- ExTera$new(dir = file.path(template_dir, \"*.html\")) tera #>  #> ── ExTera ── #>  #> Template library: #> • hello-world-template.html  ## ------------------------------------------------ ## Method `ExTera$add_file_templates` ## ------------------------------------------------  tera <- ExTera$new()  writeLines(   '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   con = file.path(tempdir(), \"hello-world.html\") )  writeLines(   '<img src=\"{{ img_src }}\">',   con = file.path(tempdir(), \"img-src.html\") )  tera$add_file_templates(   \"hello-world\" = file.path(tempdir(), \"hello-world.html\"),   \"img-src\" = file.path(tempdir(), \"img-src.html\") )  tera #>  #> ── ExTera ── #>  #> Template library: #> • hello-world #> • img-src  ## ------------------------------------------------ ## Method `ExTera$add_string_templates` ## ------------------------------------------------  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   \"img-src\" = '<img src=\"{{ img_src }}\">' )  tera #>  #> ── ExTera ── #>  #> Template library: #> • hello-world #> • img-src  ## ------------------------------------------------ ## Method `ExTera$list_templates` ## ------------------------------------------------  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   \"img-src\" = '<img src=\"{{ img_src }}\">' )  tera$list_templates()  ## ------------------------------------------------ ## Method `ExTera$render` ## ------------------------------------------------  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  outfile <- file.path(tempdir(), \"rendered-hello-world.html\")  tera$render(   \"hello-world\",   outfile = outfile,   x = \"world\",   y = \"ExTera\" )  readLines(outfile, warn = FALSE) #> [1] \"<p>Hello world. This is ExTera.<\/p>\"  ## ------------------------------------------------ ## Method `ExTera$render_to_string` ## ------------------------------------------------  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  tera$render_to_string(   \"hello-world\",   x = \"world\",   y = \"ExTera\" ) #> Rendered hello-world template: #>  #> <p>Hello world. This is ExTera.<\/p> #>   ## ------------------------------------------------ ## Method `ExTera$autoescape_on` ## ------------------------------------------------  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   \"hello-world.html\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  # not recognized as html tera$render_to_string(   \"hello-world\",   x = \"&world\",   y = \"an apostrophe, '\" ) #> Rendered hello-world template: #>  #> <p>Hello &world. This is an apostrophe, '.<\/p> #>   # html tera$render_to_string(   \"hello-world.html\",   x = \"&world\",   y = \"an apostrophe, '\" ) #> Rendered hello-world.html template: #>  #> <p>Hello &amp;world. This is an apostrophe, &#x27;.<\/p> #>   ## ------------------------------------------------ ## Method `ExTera$autoescape_off` ## ------------------------------------------------  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world.html\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  tera$autoescape_off()  tera$render_to_string(   \"hello-world.html\",   x = \"&world\",   y = \"an apostrophe, '\" ) #> Rendered hello-world.html template: #>  #> <p>Hello &world. This is an apostrophe, '.<\/p> #>"},{"path":"https://kbvernon.github.io/extera/reference/extera-package.html","id":null,"dir":"Reference","previous_headings":"","what":"extera: Template Engine Inspired by 'tera' — extera-package","title":"extera: Template Engine Inspired by 'tera' — extera-package","text":"Template engine powered 'tera' 'Rust' crate 'extendr'. Users mainly interact ExTera R6 object, serves template library, including templates depend , feature called \"inheritance\" tera. render template, users simply provide context, dataset consisting variable names values. Template syntax supports additional logic, including built-filters, tests, functions, well loops, conditions, inheritance. Documentation tera can found https://keats.github.io/tera/docs/.","code":""},{"path":"https://kbvernon.github.io/extera/reference/extera-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"extera: Template Engine Inspired by 'tera' — extera-package","text":"Maintainer: Kenneth Blake Vernon kenneth.b.vernon@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Off Template Rendering — render_template","title":"One-Off Template Rendering — render_template","text":"rendering single template file, may preferable use one-rendering option.","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-Off Template Rendering — render_template","text":"","code":"render_template(path, outfile = NULL, ...)"},{"path":"https://kbvernon.github.io/extera/reference/render_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-Off Template Rendering — render_template","text":"path character scalar, path template file outfile character scalar, path file template rendered. NULL (default), render template file string current R session. ... specify context key-value pairs key template variable value data inject.","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-Off Template Rendering — render_template","text":"outfile (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-Off Template Rendering — render_template","text":"Requires path template file, template string.","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-Off Template Rendering — render_template","text":"","code":"outdir <- tempdir()  tmp <- file.path(   outdir,   \"hello-world-template.html\" )  writeLines(   '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   con = tmp )  outfile <- file.path(   outdir,   \"hello-world-rendered.html\" )  # render to string render_template(   tmp,   x = \"world\",   y = \"ExTera\" ) #> Rendered hello-world-template.html template: #>  #> <p>Hello world. This is ExTera.<\/p> #>   # render to file render_template(   tmp,   outfile = outfile,   x = \"world\",   y = \"ExTera\" )  readLines(outfile, warn = FALSE) #> [1] \"<p>Hello world. This is ExTera.<\/p>\""}]
