[{"path":"https://kbvernon.github.io/extera/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 extera authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kbvernon.github.io/extera/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kenneth Blake Vernon. Author, maintainer, copyright holder.","code":""},{"path":"https://kbvernon.github.io/extera/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vernon K (2025). extera: Template Engine Inspired 'tera'. R package version 0.0.0.9000.","code":"@Manual{,   title = {extera: Template Engine Inspired by 'tera'},   author = {Kenneth Blake Vernon},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://kbvernon.github.io/extera/index.html","id":"extera","dir":"","previous_headings":"","what":"Template Engine Inspired by tera","title":"Template Engine Inspired by tera","text":"name extera portmandeau extendr tera, making suggestive package’s intended purpose, provide extendr-powered R wrapper around blazing fast tera templating-engine Rust.","code":""},{"path":"https://kbvernon.github.io/extera/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Template Engine Inspired by tera","text":"can install development version extera like :","code":"# install.packages(\"pak\") pak::pak(\"kbvernon/extera\")"},{"path":"https://kbvernon.github.io/extera/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Template Engine Inspired by tera","text":"Everything extera revolves around ExTera object.","code":"library(extera)  tera <- ExTera$new()  tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   \"star-wars\" = '<h2>{{ title }}<\/h2> <ol> {%- for person in people %}   {%- if person.films is containing(\"A New Hope\") %}   {%- if person.species and person.species is containing(\"Human\") %}   <li>{{ person.name }} ({{ person.homeworld }})<\/li>   {%- endif %}   {%- endif %} {%- endfor %} <\/ol> ' )  tera #>  #> ── ExTera ── #>  #> Template library: #> • star-wars #> • hello-world  starwars <- dplyr::starwars[c(\"name\", \"films\", \"homeworld\", \"species\")]  tera$render_to_string(   \"star-wars\",   title = \"Humans of A New Hope\",   people = starwars ) #> Rendered star-wars template: #>  #> <h2>Humans of A New Hope<\/h2> #> <ol> #>   <li>Luke Skywalker (Tatooine)<\/li> #>   <li>Darth Vader (Tatooine)<\/li> #>   <li>Leia Organa (Alderaan)<\/li> #>   <li>Owen Lars (Tatooine)<\/li> #>   <li>Beru Whitesun Lars (Tatooine)<\/li> #>   <li>Biggs Darklighter (Tatooine)<\/li> #>   <li>Obi-Wan Kenobi (Stewjon)<\/li> #>   <li>Wilhuff Tarkin (Eriadu)<\/li> #>   <li>Han Solo (Corellia)<\/li> #>   <li>Wedge Antilles (Corellia)<\/li> #>   <li>Raymus Antilles (Alderaan)<\/li> #> <\/ol> #>"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":null,"dir":"Reference","previous_headings":"","what":"Tera Templating Engine — ExTera","title":"Tera Templating Engine — ExTera","text":"ExTera R6 class object uses extendr encapsulate Tera's templating engine. addition providing rendering functionality, acts library hold templates may include complex dependencies, feature called template \"inheritance\" Tera.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"templating engine requires two things: template, may guessed, includes variables rendering logic describing inject data, context, set variables values injected template. Templating syntax described Tera docs.","code":""},{"path":[]},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tera Templating Engine — ExTera","text":"ExTera$new() ExTera$print() ExTera$add_file_templates() ExTera$add_string_templates() ExTera$list_templates() ExTera$render_to_file() ExTera$render_to_string() ExTera$autoescape_on() ExTera$autoescape_off() ExTera$clone()","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tera Templating Engine — ExTera","text":"Create new ExTera object.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$new()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Tera Templating Engine — ExTera","text":"print method ExTera object.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$print(n = 10L, ...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"n integer scalar, number templates print (default 10L) ... ignored","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-add-file-templates-","dir":"Reference","previous_headings":"","what":"Method add_file_templates()","title":"Tera Templating Engine — ExTera","text":"Add templates library file paths.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$add_file_templates(...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"... specify list templates key-value pairs key name template value path template file.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"templates must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-add-string-templates-","dir":"Reference","previous_headings":"","what":"Method add_string_templates()","title":"Tera Templating Engine — ExTera","text":"Add templates library character strings.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$add_string_templates(...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"... specify list templates key-value pairs key name template value string template.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"templates must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-list-templates-","dir":"Reference","previous_headings":"","what":"Method list_templates()","title":"Tera Templating Engine — ExTera","text":"List current templates library.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$list_templates()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"NULL (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-render-to-file-","dir":"Reference","previous_headings":"","what":"Method render_to_file()","title":"Tera Templating Engine — ExTera","text":"Render specified template file.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$render_to_file(template, outfile, ...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"template character scalar, name template render. outfile character scalar, path file template rendered. ... specify context key-value pairs key template variable value data inject.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"context elements must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"outfile (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-render-to-string-","dir":"Reference","previous_headings":"","what":"Method render_to_string()","title":"Tera Templating Engine — ExTera","text":"Render specified template string.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$render_to_string(template, ...)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"template character scalar, name template render. ... specify context key-value pairs key template variable value data inject.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"context elements must named.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Rendered string class TeraString \"pretty\" printing.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-autoescape-on-","dir":"Reference","previous_headings":"","what":"Method autoescape_on()","title":"Tera Templating Engine — ExTera","text":"Turn autoescaping HTML.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$autoescape_on()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"Autoescaping default.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-autoescape-off-","dir":"Reference","previous_headings":"","what":"Method autoescape_off()","title":"Tera Templating Engine — ExTera","text":"Turn autoescaping HTML.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$autoescape_off()"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"Tera Templating Engine — ExTera","text":"Autoescaping default.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Tera Templating Engine — ExTera","text":"Self (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tera Templating Engine — ExTera","text":"objects class cloneable method.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Tera Templating Engine — ExTera","text":"","code":"ExTera$clone(deep = FALSE)"},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tera Templating Engine — ExTera","text":"deep Whether make deep clone.","code":""},{"path":"https://kbvernon.github.io/extera/reference/ExTera.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tera Templating Engine — ExTera","text":"","code":"tera <- ExTera$new()  # from string template tera$add_string_templates(   \"hello-world\" = '<p>Hello {{ x }}. This is {{ y }}.<\/p>' )  # to string render tera$render_to_string(   \"hello-world\",   x = \"world\",   y = \"ExTera\" ) #> Rendered hello-world template: #>  #> <p>Hello world. This is ExTera.<\/p> #>   # from file template outdir <- tempdir()  tmp <- file.path(   outdir,   \"hello-world-template.html\" )  cat(   '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   file = tmp )  tera$add_file_templates(   \"hello-world.html\" = tmp )  outfile <- file.path(   outdir,   \"hello-world-rendered.html\" )  # to file render tera$render_to_file(   \"hello-world.html\",   outfile = outfile,   x = \"world\",   y = \"ExTera\" )  readLines(outfile, warn = FALSE) #> [1] \"<p>Hello world. This is ExTera.<\/p>\""},{"path":"https://kbvernon.github.io/extera/reference/extera-package.html","id":null,"dir":"Reference","previous_headings":"","what":"extera: Template Engine Inspired by 'tera' — extera-package","title":"extera: Template Engine Inspired by 'tera' — extera-package","text":"Template engine powered 'tera' 'Rust' crate 'extendr'. Users mainly interact ExTera R6 object, serves template library, including templates depend , feature called \"inheritance\" tera. render template, users simply provide context, dataset consisting variable names values. Template syntax supports additional logic, including built-filters, tests, functions, well loops, conditions, inheritance. Documentation tera can found https://keats.github.io/tera/docs/.","code":""},{"path":"https://kbvernon.github.io/extera/reference/extera-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"extera: Template Engine Inspired by 'tera' — extera-package","text":"Maintainer: Kenneth Blake Vernon kenneth.b.vernon@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template_file.html","id":null,"dir":"Reference","previous_headings":"","what":"One-Off Template Rendering — render_template_file","title":"One-Off Template Rendering — render_template_file","text":"rendering single template file, may preferable use one-rendering option.","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-Off Template Rendering — render_template_file","text":"","code":"render_template_file(template_file, outfile, ...)"},{"path":"https://kbvernon.github.io/extera/reference/render_template_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-Off Template Rendering — render_template_file","text":"template_file character scalar, path template file outfile character scalar, path file template rendered.","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-Off Template Rendering — render_template_file","text":"outfile (invisibly)","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-Off Template Rendering — render_template_file","text":"Requires path template file, template string.","code":""},{"path":"https://kbvernon.github.io/extera/reference/render_template_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-Off Template Rendering — render_template_file","text":"","code":"outdir <- tempdir()  tmp <- file.path(   outdir,   \"hello-world-template.html\" )  cat(   '<p>Hello {{ x }}. This is {{ y }}.<\/p>',   file = tmp )  outfile <- file.path(   outdir,   \"hello-world-rendered.html\" )  render_template_file(   template_file,   outfile,   x = \"world\",   y = \"ExTera\" ) #> Error in render_template_file(template_file, outfile, x = \"world\", y = \"ExTera\"): could not find function \"render_template_file\"  readLines(outfile, warn = FALSE) #> [1] \"<p>Hello world. This is ExTera.<\/p>\""}]
