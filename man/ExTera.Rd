% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r6.R
\name{ExTera}
\alias{ExTera}
\title{Tera Templating Engine}
\description{
\code{ExTera} is an R6 class object that uses extendr to encapsulate Tera's
templating engine. In addition to providing rendering functionality, it acts
as a library to hold templates that may include complex dependencies, a
feature called template "inheritance" in Tera.
}
\details{
A templating engine requires two things:
\itemize{
\item a \code{template}, as you may have guessed, that includes variables and
rendering logic describing where and how to inject data, and
\item a \code{context}, or a set of variables and values to be injected into the
template.
}

Templating syntax is described in the \href{https://keats.github.io/tera/docs}{Tera docs}.
}
\examples{
# initialize ExTera from directory with glob
template_dir <- file.path(tempdir(), "templates")

dir.create(template_dir)

tmp <- file.path(
  template_dir,
  "hello-world-template.html"
)

cat(
  '<p>Hello {{ x }}. This is {{ y }}.</p>',
  file = tmp
)

glob <- file.path(template_dir, "*.html")

tera <- ExTera$new(dir = glob)
tera

# initialize ExTera with empty library
tera <- ExTera$new()

# from string template
tera$add_string_templates(
  "hello-world" = '<p>Hello {{ x }}. This is {{ y }}.</p>'
)

# to string render
tera$render_to_string(
  "hello-world",
  x = "world",
  y = "ExTera"
)

# from file template

tera$add_file_templates(
  "hello-world.html" = tmp
)

outfile <- file.path(
  template_dir,
  "hello-world-rendered.html"
)

# to file render
tera$render_to_file(
  "hello-world.html",
  outfile = outfile,
  x = "world",
  y = "ExTera"
)

readLines(outfile, warn = FALSE)

}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ExTera-new}{\code{ExTera$new()}}
\item \href{#method-ExTera-print}{\code{ExTera$print()}}
\item \href{#method-ExTera-add_file_templates}{\code{ExTera$add_file_templates()}}
\item \href{#method-ExTera-add_string_templates}{\code{ExTera$add_string_templates()}}
\item \href{#method-ExTera-list_templates}{\code{ExTera$list_templates()}}
\item \href{#method-ExTera-render_to_file}{\code{ExTera$render_to_file()}}
\item \href{#method-ExTera-render_to_string}{\code{ExTera$render_to_string()}}
\item \href{#method-ExTera-autoescape_on}{\code{ExTera$autoescape_on()}}
\item \href{#method-ExTera-autoescape_off}{\code{ExTera$autoescape_off()}}
\item \href{#method-ExTera-clone}{\code{ExTera$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-new"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{ExTera} object. Will populate template library with files
in \code{dir} if specified.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$new(dir = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{character scalar, a glob pattern with \code{*} wildcards indicating
a potentially nested directory containing multiple file templates. If
\code{NULL} (the default), an \code{ExTera} with an empty library is initialized.
See details for more information.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The glob pattern \verb{templates/*.html} will match all files with the
.html extension located directly inside the \code{templates} folder, while the
glob pattern \verb{templates/**/*.html} will match all files with the .html
extension directly inside or in a subdirectory of \code{templates}. The
default naming convention is to give each template their full relative
path from \code{templates} or whatever the directory is called.
}

\subsection{Returns}{
Self (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-print"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-print}{}}}
\subsection{Method \code{print()}}{
print method for \code{ExTera} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$print(n = 10L, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{integer scalar, number of templates to print (default is 10L)}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-add_file_templates"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-add_file_templates}{}}}
\subsection{Method \code{add_file_templates()}}{
Add templates to library from file paths.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$add_file_templates(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{specify list of templates as key-value pairs where key is the
name of the template and value is the path to the template on file.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
All templates must be named.
}

\subsection{Returns}{
Self (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-add_string_templates"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-add_string_templates}{}}}
\subsection{Method \code{add_string_templates()}}{
Add templates to library from character strings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$add_string_templates(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{specify list of templates as key-value pairs where key is the
name of the template and value is a string template.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
All templates must be named.
}

\subsection{Returns}{
Self (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-list_templates"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-list_templates}{}}}
\subsection{Method \code{list_templates()}}{
List current templates in library.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$list_templates()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-render_to_file"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-render_to_file}{}}}
\subsection{Method \code{render_to_file()}}{
Render specified template to file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$render_to_file(template, outfile, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{template}}{character scalar, the name of the template to render.}

\item{\code{outfile}}{character scalar, the path to file where template is to
be rendered.}

\item{\code{...}}{specify context as key-value pairs where key is the template
variable and value is the data to inject.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
All context elements must be named.
}

\subsection{Returns}{
outfile (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-render_to_string"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-render_to_string}{}}}
\subsection{Method \code{render_to_string()}}{
Render specified template to string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$render_to_string(template, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{template}}{character scalar, the name of the template to render.}

\item{\code{...}}{specify context as key-value pairs where key is the template
variable and value is the data to inject.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
All context elements must be named.
}

\subsection{Returns}{
Rendered string with class \code{TeraString} for "pretty" printing.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-autoescape_on"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-autoescape_on}{}}}
\subsection{Method \code{autoescape_on()}}{
Turn on autoescaping of HTML.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$autoescape_on()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Autoescaping is on by default.
}

\subsection{Returns}{
Self (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-autoescape_off"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-autoescape_off}{}}}
\subsection{Method \code{autoescape_off()}}{
Turn off autoescaping of HTML.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$autoescape_off()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Autoescaping is on by default.
}

\subsection{Returns}{
Self (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExTera-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ExTera-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExTera$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
